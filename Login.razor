@page "/login"

@inject NavigationManager _navigation
@layout LoginRegisterLayout

@inject HttpClient HttpHandler
@inject UserDetail _LoginLogic
@inject DatabaseAccountrix _DatabaseLogic
@using System.Threading.Tasks

<div class="register-page">
    <div class="form-title">
        <h1>Login</h1>
    </div>
    <hr class="rounded-divider" />
    <MudPaper Class="pa-16 ma-2" Elevation="20" Style="height: 50em; width: 50em; background-color: #121212; display: flex; flex-direction: column; align-items: center; justify-content: space-between; border-radius: 25px;">
    <div class="error-message" style="display: @displaystatus;">
            @if(loginstatus == false)
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Filled">@ErrorMessage</MudAlert>
            }
            else
            {
                <MudAlert Severity="Severity.Success" Variant="Variant.Filled">Successfully logged in!</MudAlert>
            }

    </div>

    <div class="input-section">
        <MudTextField Class="@class_style" @bind-Value="userDetail.email" Label="Email" HelperText="@HelperText1.text" Variant="Variant.Text" />
    </div>

    <div class="input-section">
        <MudTextField Class="@class_style" @bind-Value="userDetail.password" Label="Password" HelperText="@HelperText2.text" Variant="Variant.Text" InputType="InputType.Password" />
    </div>

    <div class="btn-sign-up">
        <MudButton OnClick="async() => await ProcessInfo()" Variant="Variant.Filled" Style="background-color: #fff200; color: #121212; width: 200px; height: 60px;">
            Login
        </MudButton>
    </div>
    <div class="not-sign-up">
        <p>Don't have an account? <a href="/register">Sign up!</a></p>
    </div>
    <style>
        .not-sign-up
        {
            color: #ffffff
        }

        .not-sign-up a 
        {
        text-decoration: none;
        color: #fff20091;
        transition: all 0.3s ease-in-out;
        }

        .not-sign-up a:hover 
        {
        color: #fff200;
        transform: scale(1.1);
        }
    </style>
    </MudPaper>
</div>

@code {
    private List<UserDetail> userdatalist = new List<UserDetail>();
    UserDetail userDetail = new UserDetail();
    DatabaseAccountrix databaseLogic = new DatabaseAccountrix();

    protected override async Task OnInitializedAsync()
    {

        await LoadUserData();
    }

    private async Task LoadUserData()
    {
        try
        {
            UserDetail tmp_userDetail = await HttpHandler.GetFromJsonAsync<UserDetail>("/login");
            if (tmp_userDetail != null)
            {
                userdatalist.Clear();
                userdatalist.Add(tmp_userDetail);
            }
            else
            {
                displaystatus = "flex";
                ErrorMessage = "No account was found!";
                loginstatus = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Not yet create account.");
        }
    }

    private bool loginstatus { get; set; }
    private string displaystatus { get; set; } = "none";
    private string ErrorMessage { get; set; } = "Testing Error Message";
    private string class_style { get; set; } = "custom-textfield";

    CustomHelperText HelperText1 = new CustomHelperText("Enter you registered email");
    CustomHelperText HelperText2 = new CustomHelperText("Enter you password");
    private class CustomHelperText
    {
        public string text { get; set; }

        public CustomHelperText(string a_text)
        {
            text = a_text;
        }
    }

    private void NavigateToHome()
    {
        _navigation.NavigateTo("/home");
    }

    private void NavigateToLandingPage ()
    {
        _navigation.NavigateTo("/transactions");
    }

    private async Task<bool> ValidateAllInput()
    {

        await LoadUserData();
        try
        {
            if (userDetail.email.Contains("@") == false || userDetail.email.EndsWith(".com") == false || String.IsNullOrEmpty(userDetail.email) == true)
            {
                displaystatus = "flex";
                ErrorMessage = "Invalid Email Format!";
                loginstatus = false;
                StateHasChanged();
                return false;
            }
            else if (string.IsNullOrWhiteSpace(userDetail.password) == true)
            {
                displaystatus = "flex";
                ErrorMessage = "Invalid Password!";
                loginstatus = false;
                StateHasChanged();
                return false;
            }
            else
            {
                if (userdatalist.Count == 0)
                {
                    displaystatus = "flex";
                    ErrorMessage = "Account not found!";
                    loginstatus = false;
                    StateHasChanged();
                    return false;
                }
                UserDetail correct_userdata = userdatalist[0];
                userDetail = new UserDetail(userDetail.email, userDetail.password);
                if (userDetail.email != correct_userdata.email)
                {
                    displaystatus = "flex";
                    ErrorMessage = "Account not found!";
                    loginstatus = false;
                    StateHasChanged();
                    return false;
                }
                if (userDetail.email == correct_userdata.email && userDetail.password == correct_userdata.password)
                {
                    Console.WriteLine("Login successful");
                    loginstatus = true;
                    displaystatus = "flex";
                    ErrorMessage = "Login successful";
                    StateHasChanged();
                    return true;
                }
                else
                {
                    displaystatus = "flex";
                    ErrorMessage = "Invalid email or password!";
                    loginstatus = false;
                    StateHasChanged();
                    return false;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("{0}", userdatalist.Count());
            Console.WriteLine("Error occurred: " + ex.Message);
            displaystatus = "flex";
            ErrorMessage = "Empty Field Detected!";
            StateHasChanged();
            return false;
        }

    }

    private async Task ProcessInfo()
    {
        if (await ValidateAllInput() == true)
        {
            await Task.Delay(2500);
            NavigateToHome();
        }
    }
}